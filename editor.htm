<html>
<title>Axorus - DMD driver</title>
<script type="text/javascript" src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
<script type="text/javascript" defer>
    var canvas, ctx, flag = false,
        prevX = 0,
        currX = 0,
        prevY = 0,
        currY = 0,
        dot_flag = false;

    var sw = 100,
        sh = 100;

    function init() {
        canvas = document.getElementById('can');
        ctx = canvas.getContext("2d");
        w = canvas.width;
        h = canvas.height;

        ctx.clearRect(0, 0, w, h);

        canvas.addEventListener("mousemove", function (e) {
            findxy('move', e);
            squarecursor(e);
        }, false);
        canvas.addEventListener("mousedown", function (e) {
            findxy('down', e)
        }, false);
        canvas.addEventListener("mouseup", function (e) {
            findxy('up', e)
        }, false);
        canvas.addEventListener("mouseout", function (e) {
            findxy('out', e)
        }, false);

        drawBG();
    }

    function squarecursor(e){
        var SCX = e.clientX - canvas.offsetLeft - 100;
        var SCY = e.clientY - canvas.offsetTop;
        var SC = $("#squarecursor");
        SC.css("width",sw);
        SC.css("height",sh);
        SC.css("left",SCX-sw/2);
        SC.css("top",SCY-sh/2);
    }

    function draw() {
        ctx.beginPath();
        if (eraser) {
            ctx.clearRect(currX - sw / 2, currY - sh / 2, sw, sh);
        }
        else {
            ctx.fillStyle = "white";
            ctx.fillRect(currX - sw / 2, currY - sh / 2, sw, sh);
        }
        ctx.stroke();
        ctx.closePath();
    }

    function erase() {
        var m = confirm("Effacer ?");
        if (m) {
            ctx.clearRect(0, 0, w, h);
        }
    }

    function findxy(res, e) {

        if (res == 'down') {
            prevX = currX;
            prevY = currY;
            currX = e.clientX - canvas.offsetLeft - 100;
            currY = e.clientY - canvas.offsetTop;
            draw();
            flag = true;
        }
        if (res == 'up' || res == "out") {
            flag = false;
        }
        if (res == 'move') {
            if (flag) {
                prevX = currX;
                prevY = currY;
                currX = e.clientX - canvas.offsetLeft - 100;
                currY = e.clientY - canvas.offsetTop;
                draw();
            }
        }
    }

    function sizer(e) {
        sw = sh = e.value;
    }

    async function load() {
        await prep();
        log('Load');
        var canvas = document.getElementById('canprep');
        var imageData = canvas.getContext('2d').getImageData(0, 0, 1024, 768);
        var u8a = new Uint8Array(imageData.data.buffer);

        var xhr = new XMLHttpRequest();
        xhr.open("POST", '/load', false);
        xhr.send(u8a);
    }

    async function save() {
        await load();
        await log('Save');
        var xhr = new XMLHttpRequest();
        xhr.open("GET", '/save', false);
        xhr.send();
    }

    function fullframe() {
        ctx.fillStyle = "white";
        ctx.fillRect(0, 0, 1024, 768);
    }

    function centerCross() {
        var h = 768;
        var w = 1024;
        var l = 8;
        var L = 60;
        ctx.fillStyle = "white";
        ctx.fillRect(w / 2 - l / 2, h / 2 - L / 2, l, L);
        ctx.fillRect(w / 2 - L / 2, h / 2 - l / 2, L, l);
        ctx.fillRect(w / 2 - 2 * l, h / 2 - L / 2, 4 * l, l);
        ctx.fillRect(w / 2 + 1.5 * l, h / 2 + 1.5 * l, 2 * l, 2 * l);
    }

    function logo() {
        var image = new Image();
        image.onload = function () {
            ctx.drawImage(image, 0, 0,image.width, image.height);
        };
        image.src="logo.png";
    }


    function move(dx, dy) {
        var id = ctx.getImageData(0, 0, 1024, 768);
        ctx.clearRect(0, 0, 1024, 768);
        ctx.putImageData(id, dx, dy);
    }

    function loadBin() {
        ctx.clearRect(0, 0, w, h);
        $.getJSON("/loadbin", (data) => {
            console.log(data);
            var image = new Image();
            image.onload = () => {
                ctx.drawImage(image, 0, 0);
            }
            image.src = data;
        });
    }

    function drawBG() {
        cbg = document.getElementById('canbg');
        ctxbg = cbg.getContext("2d");
        ctxbg.strokeStyle = "blue";

        for (var i = 1; i < 10; i++) {
            ctxbg.beginPath();
            ctxbg.moveTo(i * w / 10, 1);
            ctxbg.lineTo(i * w / 10, h);
            ctxbg.stroke();
        }

        for (var i = 1; i < 10; i++) {
            ctxbg.beginPath();
            ctxbg.moveTo(1, i * h / 10);
            ctxbg.lineTo(w, i * h / 10);
            ctxbg.stroke();
        }

        ctxbg.fillStyle = "#5555FF";
        ctxbg.font = "20px Arial";
        for (var i = 0; i < 10; i++) {
            ctxbg.fillText(i, i * w / 10 + 10, h / 2 - 10);
        }
        for (var i = 0; i < 10; i++) {
            var alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ".split('');
            ctxbg.fillText(alphabet[i], w / 2 + 10, i * h / 10 + 25);
        }

    }

    var eraser = false;

    function toggleEraser(o) {
        var col = "";
        eraser = !eraser;
        if (eraser) {
            col = "blue";
        }
        $(o).css('color', col);
    }

    async function play() {
        await log('Play - loading...');
        await stop();
        await save();
        await genvec();
        $.getJSON("/play");
        await clearLog();
    }

    async function stop() {
        $.getJSON("/stop");
    }

    async function prep() {
        await log('Prep - image calibration...');
        var imgData = canvas.getContext('2d').getImageData(0, 0, 1024, 768);
        cprep = document.getElementById('canprep');
        ctxprep = cprep.getContext("2d");

        var r = Number(document.querySelector('#rotate').value);
        var fH = document.querySelector('#flipH').checked;
        var fV = document.querySelector('#flipV').checked;

        createImageBitmap(imgData).then((imgBitmap) => {
            ctxprep.clearRect(0, 0, 1024, 768);
            //Mirror
            ctxprep.translate((fV) ? 1024 : 0, (fH) ? 768 : 0);
            ctxprep.scale((fV) ? -1 : 1, (fH) ? -1 : 1);
            //Rotate
            ctxprep.translate(1024 / 2, 768 / 2);
            ctxprep.rotate(Math.PI / 180 * r);
            ctxprep.translate(-1024 / 2, -768 / 2);
            ctxprep.drawImage(imgBitmap, 0, 0);
            ctxprep.resetTransform();
        })


    }

    function totFlash(){
        var nbFlash = Number(document.querySelector('#nbFlash').value) || 10;
        var durFlash = Number(document.querySelector('#durFlash').value) || 100;
        var perFlash = Number(document.querySelector('#perFlash').value) || 1000;
        if(durFlash<perFlash){
            document.querySelector('#totalFlash').innerText = "Total : " + Math.round(perFlash * nbFlash / 1000) + " sec";
            $('#continuousFlag').css("background","black");
        }
        else{
            document.querySelector('#totalFlash').innerText = "Total : âˆž sec";
            $('#continuousFlag').css("background","green");
        }
    }

    async function genvec(){
        await log('GenVec...');
        var nbFlash = document.querySelector('#nbFlash').value || 10;
        var durFlash = document.querySelector('#durFlash').value || 100;
        var perFlash = document.querySelector('#perFlash').value || 1000;

        totFlash();

        var xhr = new XMLHttpRequest();
        xhr.open("GET", `/genvec?nbFlash=${nbFlash}&durFlash=${durFlash}&perFlash=${perFlash}`, false);
        xhr.send();
    }

    function continuous(){
        setTiming(1,1,1);
    }

    function oneFlash(){
        setTiming(1,10,100);
        play();
    }

    function twentyFlash(){
        setTiming(20,10,2000);
    }


    function setTiming(nbFlash,durFlash,perFlash){
        document.querySelector('#nbFlash').value = nbFlash;
        document.querySelector('#durFlash').value = durFlash;
        document.querySelector('#perFlash').value = perFlash;
        totFlash();
    }

    async function log(msg){
        console.log(msg);
        //document.querySelector('#console').innerText = msg;
    }

    async function clearLog(){
        await log('Axorus DMD Driver');
    }

    /*function lux(){
        var srcPw = document.querySelector('#srcPw').value;
        var srcFilter = document.querySelector('#srcFilter').value;
        var l = 1100000 * srcPw/100 * Math.pow(10,-1*srcFilter);
        document.querySelector('#lux').innerText = Math.round(l)+" lux";
    }*/

    function invert(){
        canvas = document.getElementById('can');
        ctx = canvas.getContext("2d");

        var id = ctx.getImageData(0,0,canvas.width,canvas.height);
        var d = id.data;
        var nid = ctx.createImageData(canvas.width,canvas.height);
        var nd = nid.data;
        for(var i = 0; i < nd.length;i++){
            if(d[i]==255) nd[i]=0;
            else nd[i]=255;
        }
        ctx.putImageData(nid,0,0);
    }

    function saveAsImg(){
        canvas = document.getElementById('can');
        var link = document.createElement('a');
        link.download = 'download.png';
        link.href = canvas.toDataURL();
        link.click();
        link.delete;
    }

    function loadImg(){
        var input = document.getElementById('file_input');
        canvas = document.getElementById('can');
        ctx = canvas.getContext("2d");

        var URL = window.webkitURL || window.URL;
        var url = URL.createObjectURL(input.files[0]);
        var img = new Image();
        img.src = url;
        img.onload = function() {
                img_width = img.width;
                img_height = img.height;
                ctx.drawImage(img, 0, 0, img_width, img_height);
        }
    }

    function debugImg(){
        canvas = document.getElementById('can');
        ctx = canvas.getContext("2d");

        var id = ctx.getImageData(0,0,canvas.width,canvas.height);
        var k =0;
        id.data.forEach(function(v,i){          
            if(v > 0 && v < 255){
                console.log(i%4, i/4,v);
                k++;
            }
        });
        console.log("Total",k);
    }

    function easter() {
        canvas = document.getElementById('can');
        ctx = canvas.getContext("2d");
        var imge = new Image();
        imge.src="easter.png";
        imge.onload = function () {
            ctx.drawImage(imge, 0, 0,imge.width, imge.height);
        };
    }

    //document.addEventListener('keypress', logKey);
    document.addEventListener('keydown', logKey);
    var goEaster = false;
    function logKey(e){
        if(e.code == "KeyJ"){
            goEaster = true;
        }
        else if(goEaster && e.code == "KeyD"){
            easter();
        }
        else{
            goEaster = false;
        }
        if(e.code == "ArrowUp"){
            move(0,-h/100);
        }
        if(e.code == "ArrowDown"){
            move(0,h/100);
        }
        if(e.code == "ArrowLeft"){
            move(-w/100,0);
        }
        if(e.code == "ArrowRight"){
            move(w/100,0);
        }
        if(e.code == "KeyA"){
            moveCircuit(-5,0,0,0);
        }
        if(e.code == "KeyS"){
            moveCircuit(0,5,0,0);
        }
        if(e.code == "KeyD"){
            moveCircuit(5,0,0,0);
        }
        if(e.code == "KeyW"){
            moveCircuit(0,-5,0,0);
        }
        if(e.code == "KeyQ"){
            moveCircuit(0,0,-0.05,0);
        }
        if(e.code == "KeyE"){
            moveCircuit(0,0,0.05,0);
        }
        if(e.code == "KeyZ"){
            moveCircuit(0,0,0,-1);
        }
        if(e.code == "KeyC"){
            moveCircuit(0,0,0,1);
        }
    }

    function loadChipImg(){
        var input = document.getElementById('chip_img');

        var URL = window.webkitURL || window.URL;
        var url = URL.createObjectURL(input.files[0]);
        var img = new Image();
        img.src = url;
        img.onload = function() {
                canvasbg = document.getElementById('canimgbg');
                ctxbg = canvasbg.getContext("2d");
                w = img.width;
                h = img.height;
                ctxbg.drawImage(img, 0, 0, w, h);
                applyCircuit();
        }
    }

    function applyCircuit(){
        x = Number(document.getElementById('circuitX').value);
        y = Number(document.getElementById('circuitY').value);
        s = Number(document.getElementById('circuitScale').value);
        r = Number(document.getElementById('circuitRotate').value);
        var c = $('#canimgbg');
        c.css('left',x);
        c.css('top',y);
        c.css('width', 1024*s);
        c.css('transform', `rotate(${r}deg)`);
    }

    function moveCircuit(x,y,s,r){
        var cX = document.getElementById('circuitX');
        var cY = document.getElementById('circuitY');
        var cS = document.getElementById('circuitScale');
        var cR = document.getElementById('circuitRotate');
        cX.value = Number(cX.value) + x;
        cY.value = Number(cY.value) + y;
        cS.value = Number(Number(cS.value) + s).toFixed(3);
        cR.value = Number(cR.value) + r;
        applyCircuit();
    }

    //Blazing Angle
    function prime(angle){
        return Math.atan(Math.tan(angle)/Math.sqrt(2));
    }

    function degInrad(angleDeg){
        return angleDeg * Math.PI / 180;
    }

    function getM(lambda,pitch,alpha,theta){
        let thetaP = prime(theta);
        let alphaP = prime(alpha);
        let betaP = 2*thetaP-alphaP;
        return pitch/lambda*(Math.sin(alphaP)+Math.sin(betaP));
    }

    function getMu(lambda,pitch,alpha,theta){
        let alphaR = degInrad(alpha);
        let thetaR = degInrad(theta);
        return Math.abs(Math.abs(getM(lambda,pitch,alphaR,thetaR)%1)-0.5).toFixed(2);
    }

    function drawMu(){
        let lambda = Number($('#blazeLambda').val());
        let pitch = Number($('#blazePitch').val());
        let alpha = Number($('#blazeAlpha').val());
        let theta = Number($('#blazeTheta').val());
        let mu = getMu(lambda,pitch,alpha,theta);
        
        let canBlaze = document.querySelector('#canblaze');
        let w = canBlaze.width;
        let h = canBlaze.height;
        let ctxBlaze = canBlaze.getContext('2d');

        ctxBlaze.clearRect(0,0,w,h);

        ctxBlaze.beginPath();
        ctxBlaze.lineWidth = "1";
        ctxBlaze.strokeStyle = "blue";
        let step = w/150;
        for(var i = 0; i<=150;i++){
            var alphaX = i-75;
            var muY = (0.5-getMu(lambda,pitch,alphaX,theta))/0.6*h;
            if(i==0) ctxBlaze.moveTo(0,muY);
            else ctxBlaze.lineTo(i*step,muY);
        }
        ctxBlaze.stroke();
        //Abscisse
        ctxBlaze.beginPath();
        ctxBlaze.lineWidth = "2";
        ctxBlaze.moveTo(0,h*0.95);
        ctxBlaze.lineTo(w,h*0.95);
        ctxBlaze.stroke();
        //mu value
        ctxBlaze.font = "14px Arial";
        ctxBlaze.fillStyle = "#5555FF";
        ctxBlaze.textAlign = "center";
        ctxBlaze.fillText("-75", 10, h*0.9);
        ctxBlaze.fillText("0", w/2, h*0.9);
        ctxBlaze.fillText("75", w-10, h*0.9);
        //current value
        ctxBlaze.fillText(mu, (alpha+75)/150*w+15, h/2);
        ctxBlaze.fillRect((alpha+75)/150*w,0,1,h);
    }

    function showBlaze(){
        drawMu();
        $('#canblaze').show();
    }

</script>
<link href="https://cdn.jsdelivr.net/npm/remixicon@2.5.0/fonts/remixicon.css" rel="stylesheet">
<style>
    body {
        color: white;
        background-color: black;
        font-family: Arial, Helvetica, sans-serif;
    }

    #editor {
        position: absolute;
        top: 0px;
        left: 100px;
    }

    #menu {
        width: 100px;
    }

    #menu>span {
        padding-left: 15px;
        cursor: pointer;
        font-size: 50px;
    }

    #console {
        top: 30px;
        background-color: blue;
    }

    #pngload{
        top:0px;
    }

    #calib {
        top: 71px;
    }

    #timing {
        top: 214px;
    }

    #circuits {
        top: 552px;
    }

    .cards {
        position: absolute;
        left: 1150px;
        width: 200px;
        background-color: #303030;
        padding: 15px;
        border-radius: 25px;
    }

    .cards > h3 {
        margin-top: 5px;
    }

    .cards > button {
        border-radius: 10px;
        padding: 7px;
        border: 1px solid white;
        color: white;
        background-color: black;
    }

    .unitsi {
        text-align:right;
        border-radius: 10px;
        border: 1px solid black;
        padding: 5px 30px 5px 5px;
    }

    .unitst {
        margin-left:-25px;
        color: black;
    }

    #odtable {
        position: absolute;
        border: 1px solid white;
        top: 628px;
        left: 1150px;
        width: 200px;
        padding: 10px;
        border-radius: 25px;
    }

    #odtable table{
        text-align: center;
    }

    #odtable thead{
        font-weight: bold;
    }

    #squarecursor
    {
        position: absolute;
        border: 1px dashed blue;
        width: 10px;
        height: 10px;
        left: 150px;
        top: 150px;
        z-index: 3;
        pointer-events: none;
    }
</style>

<body onload="init();totFlash();">
    <div id="menu">
        <span onclick="play()" title="Play on Microscope"><i class="ri-microscope-line"></i></span>
        <span onclick="saveAsImg()" title="Save as Image"><i class="ri-save-3-fill"></i></span>
        <span onclick="stop()" title="Stop equence on Microscope"><i class="ri-stop-circle-line"></i></span>
        <span onclick="erase()" title="Clear image"><i class="ri-delete-bin-line"></i></span>
        <span onclick="toggleEraser(this)" title="Eraser"><i class="ri-eraser-line"></i></span>
        <span onclick="fullframe()" title="Fullframe"><i class="ri-sun-line"></i></span>
        <span onclick="invert()" title="Invert Image"><i class="ri-contrast-fill"></i></span>
        <span onclick="logo()" title="Draw Center Cross for reference"><i class="ri-focus-3-line"></i></span>
        <span onclick="move(0,-h/20)" title="Move Up"><i class="ri-arrow-up-line"></i></span>
        <span onclick="move(0,h/20)" title="Move Down"><i class="ri-arrow-down-line"></i></span>
        <span onclick="move(-w/20,0)" title="Move Left"><i class="ri-arrow-left-line"></i></span>
        <span onclick="move(w/20,0)" title="Move Right"><i class="ri-arrow-right-line"></i></span>
    </div>
    <div id="editor">
        <div id="squarecursor"></div>
        <canvas id="can" width="1024" height="768"
            style="position:absolute;top:0;left:0px;border:1px solid white;opacity:0.88;"></canvas>
        <canvas id="canbg" width="1024" height="768" style="position:absolute;top:0;left:0px;z-index:2;pointer-events: none;"></canvas>
        <canvas id="canimgbg" width="1024" height="768" style="position:absolute;top:0;left:0px;z-index:-10;transform-origin: top left;"></canvas>
    </div>
    <div id="pngload" class="cards">
        Open saved image
        <input type="file" id="file_input" onchange="loadImg()">
    </div>
    <div id="calib" class="cards">
        <h3>Calibration</h3>
        Rotate <input id="rotate" class="unitsi" type="text" placeholder="rotate" value="90" size="3"><span class="unitst">Â°</span><br>
        <input type="checkbox" name="flipH" id="flipH" checked="checked"> Flip Horizontaly<br>
        <input type="checkbox" name="flipV" id="flipV"> Flip Verticaly<br>
    </div>
    <div id="timing" class="cards">
        <h3>Timing</h3>
        <label for="nbFlash"># Flash</label><br><input id="nbFlash" class="unitsi" type="text" onchange="totFlash()" value="20" size="3"><span class="unitst">#</span><br><br>
        <label for="durFlash">Flash Duration</label><br><input id="durFlash" class="unitsi" type="text" onchange="totFlash()" value="10" size="4"><span class="unitst">ms</span><br><br>
        <label for="perFlash">Next Flash</label><br><input id="perFlash" class="unitsi" type="text" onchange="totFlash()" value="2000" size="6"><span class="unitst">ms</span><br><br>
        <span id="totalFlash"></span><br><br>
        <button onclick="oneFlash();"><i class="ri-flashlight-fill"></i>1 F</button><button onclick="twentyFlash();">20 F</button><button id="continuousFlag" onclick="continuous();">Continuous</button>
    </div>
    <div id="circuits" class="cards">
        <h3>Circuits</h3>
        <input type="file" id="chip_img" onchange="loadChipImg()"><br>
        x <input id="circuitX" class="unitsi" type="number" value="0" min="0" max="1024" step="1" onchange="applyCircuit();"><span class="unitst">px</span><br>
        y <input id="circuitY" class="unitsi" type="number" value="0" min="0" max="768" step="1" onchange="applyCircuit();"><span class="unitst">px</span><br>
        scale <input id="circuitScale" class="unitsi" type="text" value="1" size="5" onchange="applyCircuit();"><span class="unitst">x</span><br>
        rotate <input id="circuitRotate" class="unitsi" type="text" value="0" size="5" onchange="applyCircuit();"><span class="unitst">Â°</span>
    </div>
    <div id="blazing" class="cards">
        <h3>Blazing Angle</h3>
        lambda <input id="blazeLambda" class="unitsi" type="number" value="0.3" min="0.3" max="2" step="0.01" onchange="drawMu();"><span class="unitst">Âµm</span><br>
        pitch <input id="blazePitch" class="unitsi" type="number" value="5" min="5" max="15" step="0.1" onchange="drawMu();"><span class="unitst">Âµm</span><br>
        alpha <input id="blazeAlpha" class="unitsi" type="number" value="0" min="-75" max="75" step="1" onchange="drawMu();"><span class="unitst">Â°</span><br>
        theta <input id="blazeTheta" class="unitsi" type="number" value="0" min="-20" max="20" step="1" onchange="drawMu();"><span class="unitst">Â°</span><br>
        <button onclick="showBlaze();">Show Blaze</button>
    </div>

    <!--<div id="odtable">
        <label for="srcPw">Source Power</label><br><input id="srcPw" class="unitsi" type="text" onchange="lux();" value="10" size="3"><span class="unitst">%</span><br><br>
        <label for="srcFilter">Filter</label><br><input id="srcFilter" class="unitsi" type="text" onchange="lux();" value="3" size="3"><span class="unitst">od</span><br><br>
        Illuminance : <span id="lux">0 lux</span>
    </div>-->
    <input type="range" min="1" max="100" onclick="sizer(this)" style="position:absolute;top:20px;left:110px;z-index: 3; width: 250px;">
    <canvas id="canprep" width="1024" height="768" style="visibility:hidden;position:absolute;top:00px;left:0px;border:1px solid white;"></canvas>
    <canvas id="canblaze" width="800" height="400" style="display:none;position: absolute; top:780px;left:100px"></canvas>
</body>
</html>