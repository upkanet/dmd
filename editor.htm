<html>
<title>Axorus - DMD driver</title>
<script type="text/javascript" src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
<script type="text/javascript">
    var canvas, ctx, flag = false,
        prevX = 0,
        currX = 0,
        prevY = 0,
        currY = 0,
        dot_flag = false;

    var sw = 100,
        sh = 100;

    function init() {
        canvas = document.getElementById('can');
        ctx = canvas.getContext("2d");
        w = canvas.width;
        h = canvas.height;

        ctx.clearRect(0, 0, w, h);

        canvas.addEventListener("mousemove", function (e) {
            findxy('move', e)
        }, false);
        canvas.addEventListener("mousedown", function (e) {
            findxy('down', e)
        }, false);
        canvas.addEventListener("mouseup", function (e) {
            findxy('up', e)
        }, false);
        canvas.addEventListener("mouseout", function (e) {
            findxy('out', e)
        }, false);

        drawBG();
    }

    function draw() {
        ctx.beginPath();
        if (eraser) {
            ctx.clearRect(currX - sw / 2, currY - sh / 2, sw, sh);
        }
        else {
            ctx.fillStyle = "white";
            ctx.fillRect(currX - sw / 2, currY - sh / 2, sw, sh);
        }
        ctx.stroke();
        ctx.closePath();
    }

    function erase() {
        var m = confirm("Effacer ?");
        if (m) {
            ctx.clearRect(0, 0, w, h);
        }
    }

    function findxy(res, e) {

        if (res == 'down') {
            prevX = currX;
            prevY = currY;
            currX = e.clientX - canvas.offsetLeft - 100;
            currY = e.clientY - canvas.offsetTop;
            draw();
            flag = true;
        }
        if (res == 'up' || res == "out") {
            flag = false;
        }
        if (res == 'move') {
            if (flag) {
                prevX = currX;
                prevY = currY;
                currX = e.clientX - canvas.offsetLeft - 100;
                currY = e.clientY - canvas.offsetTop;
                draw();
            }
        }
    }

    function sizer(e) {
        sw = sh = e.value;
    }

    async function load() {
        await prep();
        log('Load');
        var canvas = document.getElementById('canprep');
        var imageData = canvas.getContext('2d').getImageData(0, 0, 1024, 768);
        var u8a = new Uint8Array(imageData.data.buffer);

        var xhr = new XMLHttpRequest();
        xhr.open("POST", '/load', false);
        xhr.send(u8a);
    }

    async function save() {
        await load();
        log('Save');
        var xhr = new XMLHttpRequest();
        xhr.open("GET", '/save', false);
        xhr.send();
    }

    function fullframe() {
        ctx.fillStyle = "white";
        ctx.fillRect(0, 0, 1024, 768);
    }

    function centerCross() {
        var h = 768;
        var w = 1024;
        var l = 8;
        var L = 60;
        ctx.fillStyle = "white";
        ctx.fillRect(w / 2 - l / 2, h / 2 - L / 2, l, L);
        ctx.fillRect(w / 2 - L / 2, h / 2 - l / 2, L, l);
        ctx.fillRect(w / 2 - 2 * l, h / 2 - L / 2, 4 * l, l);
        ctx.fillRect(w / 2 + 1.5 * l, h / 2 + 1.5 * l, 2 * l, 2 * l);
    }

    function logo() {
        var image = new Image();
        image.onload = function () {
            var factor = 0.7;
            ctx.drawImage(image, 150, 275,image.width * factor, image.height * factor);
        };
        image.src="logo.png";
    }


    function move(dx, dy) {
        var id = ctx.getImageData(0, 0, 1024, 768);
        ctx.clearRect(0, 0, 1024, 768);
        ctx.putImageData(id, dx, dy);
    }

    function loadBin() {
        ctx.clearRect(0, 0, w, h);
        $.getJSON("/loadbin", (data) => {
            console.log(data);
            var image = new Image();
            image.onload = () => {
                ctx.drawImage(image, 0, 0);
            }
            image.src = data;
        });
    }

    function drawBG() {
        cbg = document.getElementById('canbg');
        ctxbg = cbg.getContext("2d");
        ctxbg.strokeStyle = "blue";

        for (var i = 1; i < 10; i++) {
            ctxbg.beginPath();
            ctxbg.moveTo(i * w / 10, 1);
            ctxbg.lineTo(i * w / 10, h);
            ctxbg.stroke();
        }

        for (var i = 1; i < 10; i++) {
            ctxbg.beginPath();
            ctxbg.moveTo(1, i * h / 10);
            ctxbg.lineTo(w, i * h / 10);
            ctxbg.stroke();
        }

        ctxbg.fillStyle = "#5555FF";
        ctxbg.font = "20px Arial";
        for (var i = 0; i < 10; i++) {
            ctxbg.fillText(i, i * w / 10 + 10, h / 2 - 10);
        }
        for (var i = 0; i < 10; i++) {
            var alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ".split('');
            ctxbg.fillText(alphabet[i], w / 2 + 10, i * h / 10 + 25);
        }

    }

    var eraser = false;

    function toggleEraser(o) {
        var col = "";
        eraser = !eraser;
        if (eraser) {
            col = "blue";
        }
        $(o).css('color', col);
    }

    async function play() {
        log('Play - loading...');
        await stop();
        await save();
        //await genvec();
        $.getJSON("/play");
        clearLog();
    }

    async function stop() {
        $.getJSON("/stop");
    }

    function prep() {
        log('Prep - image calibration...');
        var imgData = canvas.getContext('2d').getImageData(0, 0, 1024, 768);
        cprep = document.getElementById('canprep');
        ctxprep = cprep.getContext("2d");

        var r = Number(document.querySelector('#rotate').value);
        var fH = document.querySelector('#flipH').checked;
        var fV = document.querySelector('#flipV').checked;
        console.log(r, fH, fV);

        createImageBitmap(imgData).then((imgBitmap) => {
            ctxprep.clearRect(0, 0, 1024, 768);
            //Mirror
            ctxprep.translate((fV) ? 1024 : 0, (fH) ? 768 : 0);
            ctxprep.scale((fV) ? -1 : 1, (fH) ? -1 : 1);
            //Rotate
            ctxprep.translate(1024 / 2, 768 / 2);
            ctxprep.rotate(Math.PI / 180 * r);
            ctxprep.translate(-1024 / 2, -768 / 2);
            ctxprep.drawImage(imgBitmap, 0, 0);
            ctxprep.resetTransform();
        })


    }

    function totFlash(){
        var nbFlash = Number(document.querySelector('#nbFlash').value) || 10;
        var durFlash = Number(document.querySelector('#durFlash').value) || 100;
        var perFlash = Number(document.querySelector('#perFlash').value) || 1000;
        if(durFlash<perFlash){
            document.querySelector('#totalFlash').innerText = "Total : " + Math.round(perFlash * nbFlash / 1000) + " sec";
        }
        else{
            document.querySelector('#totalFlash').innerText = "Total : âˆž sec";
        }
    }

    async function genvec(){
        log('GenVec...');
        var nbFlash = document.querySelector('#nbFlash').value || 10;
        var durFlash = document.querySelector('#durFlash').value || 100;
        var perFlash = document.querySelector('#perFlash').value || 1000;

        totFlash();

        var xhr = new XMLHttpRequest();
        xhr.open("GET", `/genvec?nbFlash=${nbFlash}&durFlash=${durFlash}&perFlash=${perFlash}`, false);
        xhr.send();
    }

    function continuous(){
        document.querySelector('#nbFlash').value = 1;
        document.querySelector('#durFlash').value = 1000;
        document.querySelector('#perFlash').value = 1000;
        totFlash();
    }

    function log(msg){
        var c = document.querySelector('#console');
        c.innerHTML = msg;
    }

    function clearLog(){
        log('Axorus DMD Driver');
    }

    function lux(){
        var srcPw = document.querySelector('#srcPw').value;
        var srcFilter = document.querySelector('#srcFilter').value;
        var l = 1100000 * srcPw/100 * Math.pow(10,-1*srcFilter);
        document.querySelector('#lux').innerText = Math.round(l)+" lux";
    }


</script>
<link href="https://cdn.jsdelivr.net/npm/remixicon@2.5.0/fonts/remixicon.css" rel="stylesheet">
<style>
    body {
        color: white;
        background-color: black;
        font-family: Arial, Helvetica, sans-serif;
    }

    #editor {
        position: absolute;
        top: 0px;
        left: 100px;
    }

    #menu {
        width: 100px;
    }

    #menu>span {
        padding-left: 15px;
        cursor: pointer;
        font-size: 50px;
    }

    #console {
        top: 30px;
        background-color: blue;
    }

    #calib {
        top: 90px;
    }

    #timing {
        top: 238px;
    }

    .cards {
        position: absolute;
        left: 1150px;
        width: 200px;
        background-color: #303030;
        padding: 15px;
        border-radius: 25px;
    }

    .cards > h3 {
        margin-top: 5px;
    }

    .cards > button {
        border-radius: 10px;
        padding: 7px;
        border: 1px solid white;
        color: white;
        background-color: black;
    }

    .unitsi {
        text-align:right;
        border-radius: 10px;
        border: 1px solid black;
        padding: 5px 30px 5px 5px;
    }

    .unitst {
        margin-left:-25px;
        color: black;
    }

    #odtable {
        position: absolute;
        border: 1px solid white;
        top: 586px;
        left: 1150px;
        width: 200px;
        padding: 10px;
        border-radius: 25px;
    }

    #odtable table{
        text-align: center;
    }

    #odtable thead{
        font-weight: bold;
    }
</style>

<body onload="init();totFlash();lux();">
    <div id="menu">
        <span onclick="play()" title="Play on Microscope"><i class="ri-microscope-line"></i></span>
        <span onclick="stop()" title="Stop equence on Microscope"><i class="ri-stop-circle-line"></i></span>
        <span onclick="erase()" title="Clear image"><i class="ri-delete-bin-line"></i></span>
        <span onclick="toggleEraser(this)" title="Eraser"><i class="ri-eraser-line"></i></span>
        <span onclick="fullframe()" title="Fullframe"><i class="ri-sun-line"></i></span>
        <span onclick="logo()" title="Draw Center Cross for reference"><i class="ri-focus-3-line"></i></span>
        <span onclick="move(0,-h/20)" title="Move Up"><i class="ri-arrow-up-line"></i></span>
        <span onclick="move(0,h/20)" title="Move Down"><i class="ri-arrow-down-line"></i></span>
        <span onclick="move(-w/20,0)" title="Move Left"><i class="ri-arrow-left-line"></i></span>
        <span onclick="move(w/20,0)" title="Move Right"><i class="ri-arrow-right-line"></i></span>
    </div>
    <div id="editor">
        <canvas id="can" width="1024" height="768"
            style="position:absolute;top:0;left:0px;border:1px solid white;"></canvas>
        <canvas id="canbg" width="1024" height="768"
            style="position:absolute;top:0;left:0px;z-index:2;pointer-events: none;"></canvas>
    </div>
    <div id="console" class="cards">Axorus DMD Driver</div>
    <div id="calib" class="cards">
        <h3>Calibration</h3>
        Rotate <input id="rotate" class="unitsi" type="text" placeholder="rotate" value="90" size="3"><span class="unitst">Â°</span><br>
        <input type="checkbox" name="flipH" id="flipH" checked="checked"> Flip Horizontaly<br>
        <input type="checkbox" name="flipV" id="flipV"> Flip Verticaly<br>
    </div>
    <div id="timing" class="cards">
        <h3>Timing</h3>
        <label for="nbFlash"># Flash</label><br><input id="nbFlash" class="unitsi" type="text" onchange="totFlash()" value="1" size="3"><span class="unitst">#</span><br><br>
        <label for="durFlash">Flash Duration</label><br><input id="durFlash" class="unitsi" type="text" onchange="totFlash()" value="1000" size="4"><span class="unitst">ms</span><br><br>
        <label for="perFlash">Next Flash</label><br><input id="perFlash" class="unitsi" type="text" onchange="totFlash()" value="1000" size="6"><span class="unitst">ms</span><br><br>
        <span id="totalFlash"></span><br><br>
        <button onclick="continuous();">Continuous</button>
    </div>
    <div id="odtable">
        <label for="srcPw">Source Power</label><br><input id="srcPw" class="unitsi" type="text" onchange="lux();" value="10" size="3"><span class="unitst">%</span><br><br>
        <label for="srcFilter">Filter</label><br><input id="srcFilter" class="unitsi" type="text" onchange="lux();" value="3" size="3"><span class="unitst">od</span><br><br>
        Illuminance : <span id="lux">0 lux</span>
    </div>
    <input type="range" min="1" max="100" onclick="sizer(this)" style="position:absolute;top:20px;left:110px;z-index: 3; width: 250px;">
    <canvas id="canprep" width="1024" height="768" style="visibility:hidden;position:absolute;top:00px;left:0px;border:1px solid white;"></canvas>
</body>
</html>